import React, { useState, useEffect } from "react";

function WebPlayback(props) {
  const [player, setPlayer] = useState(undefined);
  const [is_paused, setPaused] = useState(false);
  const [is_active, setActive] = useState(false);
  const [current_track, setTrack] = useState(track);
  const [searchResults, setSearchResults] = useState([]);

  // Search function to query Spotify API
  const handleSearch = async (query) => {
    const token = props.token;
    const url = `https://api.spotify.com/v1/search?q=${encodeURIComponent(
      query
    )}&type=track&limit=3`;

    try {
      const response = await fetch(url, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const data = await response.json();
      if (data.tracks && data.tracks.items) {
        setSearchResults(data.tracks.items); // Store tracks in state
      } else {
        console.error("No tracks found.");
      }
    } catch (error) {
      console.error("Error fetching search results:", error);
    }
  };

  // Play a selected track
  const playTrack = (uri) => {
    if (player) {
      player._options.getOAuthToken((accessToken) => {
        fetch("https://api.spotify.com/v1/me/player/play", {
          method: "PUT",
          body: JSON.stringify({ uris: [uri] }),
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${accessToken}`,
          },
        })
          .then((response) => {
            if (!response.ok) {
              console.error("Failed to play track:", response.statusText);
            }
          })
          .catch((error) => console.error("Error playing track:", error));
      });
    }
  };

  useEffect(() => {
    const script = document.createElement("script");
    script.src = "https://sdk.scdn.co/spotify-player.js";
    script.async = true;

    document.body.appendChild(script);

    window.onSpotifyWebPlaybackSDKReady = () => {
      const isTokenValid = props.token && props.token.length > 0;
      if (!isTokenValid) {
        console.error("Invalid token");
        return;
      }

      const player = new window.Spotify.Player({
        name: "Web Playback SDK",
        getOAuthToken: (cb) => {
          cb(props.token);
        },
        volume: 0.5,
      });

      setPlayer(player);

      player.addListener("ready", ({ device_id }) => {
        console.log("Ready with Device ID", device_id);

        fetch("https://api.spotify.com/v1/me/player", {
          method: "PUT",
          body: JSON.stringify({
            device_ids: [device_id],
            play: true,
          }),
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${props.token}`,
          },
        })
          .then((response) => {
            if (response.ok) {
              console.log("Playback transferred to the Web SDK player.");
            } else {
              console.error("Failed to transfer playback:", response.statusText);
            }
          })
          .catch((err) => console.error("Error transferring playback:", err));
      });

      player.addListener("not_ready", ({ device_id }) => {
        console.log("Device ID has gone offline", device_id);
      });

      player.connect();

      player.addListener("player_state_changed", (state) => {
        if (!state) {
          return;
        }

        setTrack(state.track_window.current_track);
        setPaused(state.paused);

        player.getCurrentState().then((state) => {
          !state ? setActive(false) : setActive(true);
        });
      });

      player.addListener("initialization_error", ({ message }) => {
        console.error("Initialization Error:", message);
      });

      player.addListener("authentication_error", ({ message }) => {
        console.error("Authentication Error:", message);
      });

      player.addListener("account_error", ({ message }) => {
        console.error("Account Error:", message);
      });

      player.addListener("playback_error", ({ message }) => {
        console.error("Playback Error:", message);
      });
    };
  }, []);

  return (
    <>
      <div className="container">
        <div className="main-wrapper">
          <input
            type="text"
            placeholder="Search for a song, album, or artist"
            onKeyDown={(e) => e.key === "Enter" && handleSearch(e.target.value)}
          />
          <button onClick={(e) => handleSearch(e.target.previousSibling.value)}>
            Search
          </button>

          <div>
            {searchResults.map((track) => (
              <div key={track.id}>
                  <div>
                                      <img src={track.album.images[0].url}/>
                                  </div>
                <p>
                  {track.name} by {track.artists[0].name}
                </p>
                <button onClick={() =>  {playTrack(track.uri);
                    setSearchResults([]);}}
                    >Play</button>
              </div>
            ))}
          </div>

          <img
            src={current_track.album.images[0].url}
            className="now-playing__cover"
            alt=""
          />

          <div className="now-playing__side">
            <div className="now-playing__name">{current_track.name}</div>
            <div className="now-playing__artist">
              {current_track.artists[0].name}
            </div>

            <button
              className="btn-spotify"
              onClick={() => {
                player.previousTrack();
              }}
            >
              &lt;&lt;
            </button>

            <button
              className="btn-spotify"
              onClick={() => {
                player.togglePlay();
              }}
            >
              {is_paused ? "PLAY" : "PAUSE"}
            </button>

            <button
              className="btn-spotify"
              onClick={() => {
                player.nextTrack();
              }}
            >
              &gt;&gt;
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

const track = {
  name: "",
  album: {
    images: [{ url: "" }],
  },
  artists: [{ name: "" }],
};

export default WebPlayback;
